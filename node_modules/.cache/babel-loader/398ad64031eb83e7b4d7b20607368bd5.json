{"ast":null,"code":"const express = require('express');\n\nconst server = express();\n\nconst SpotifyWebApi = require('spotify-web-api-node');\n\nscopes = ['user-read-private', 'user-read-email', 'playlist-modify-public', 'playlist-modify-private'];\n\nrequire('dotenv').config();\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: process.env.SPOTIFY_API_ID,\n  clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n  redirectUri: process.env.CALLBACK_URL\n});\n/* GET home page. */\n\nserver.get('/', function (req, res, next) {\n  res.send(`home page (will be the react app, I guess, so this route won't render anything.)`);\n});\nserver.get('/login', (req, res) => {\n  const html = spotifyApi.createAuthorizeURL(scopes);\n  res.redirect(html + \"&show_dialog=true\");\n});\nserver.get('/callback', async (req, res) => {\n  const {\n    code\n  } = req.query;\n\n  try {\n    const data = await spotifyApi.authorizationCodeGrant(code);\n    const {\n      access_token,\n      refresh_token\n    } = data.body;\n    spotifyApi.setAccessToken(access_token);\n    spotifyApi.setRefreshToken(refresh_token);\n    res.redirect('/');\n  } catch (err) {\n    res.redirect('/#/error/invalid token');\n  }\n});\nserver.get('/playlists', async (req, res) => {\n  try {\n    var result = await spotifyApi.getUserPlaylists();\n    console.log(result.body);\n    res.status(200).send(result.body);\n  } catch (err) {\n    res.status(400).send(err);\n  }\n});\nconst port = process.env.PORT || 3001;\nserver.listen(port, () => {\n  console.log(`watching port ${port}`);\n});","map":{"version":3,"sources":["C:/Users/joshu/Test/src/server/server.js"],"names":["express","require","server","SpotifyWebApi","scopes","config","spotifyApi","clientId","process","env","SPOTIFY_API_ID","clientSecret","SPOTIFY_CLIENT_SECRET","redirectUri","CALLBACK_URL","get","req","res","next","send","html","createAuthorizeURL","redirect","code","query","data","authorizationCodeGrant","access_token","refresh_token","body","setAccessToken","setRefreshToken","err","result","getUserPlaylists","console","log","status","port","PORT","listen"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGF,OAAO,EAAtB;;AAEA,MAAMG,aAAa,GAAGF,OAAO,CAAC,sBAAD,CAA7B;;AACAG,MAAM,GAAG,CAAC,mBAAD,EAAsB,iBAAtB,EAAyC,wBAAzC,EAAmE,yBAAnE,CAAT;;AAEAH,OAAO,CAAC,QAAD,CAAP,CAAkBI,MAAlB;;AAEA,MAAMC,UAAU,GAAG,IAAIH,aAAJ,CAAkB;AACjCI,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,cADW;AAEjCC,EAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,qBAFO;AAGjCC,EAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHQ,CAAlB,CAAnB;AAMA;;AACAZ,MAAM,CAACa,GAAP,CAAW,GAAX,EAAgB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACtCD,EAAAA,GAAG,CAACE,IAAJ,CAAU,kFAAV;AACH,CAFD;AAIAjB,MAAM,CAACa,GAAP,CAAW,QAAX,EAAqB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,QAAMG,IAAI,GAAGd,UAAU,CAACe,kBAAX,CAA8BjB,MAA9B,CAAb;AACAa,EAAAA,GAAG,CAACK,QAAJ,CAAaF,IAAI,GAAG,mBAApB;AACH,CAHD;AAKAlB,MAAM,CAACa,GAAP,CAAW,WAAX,EAAwB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACxC,QAAM;AAAEM,IAAAA;AAAF,MAAWP,GAAG,CAACQ,KAArB;;AACA,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMnB,UAAU,CAACoB,sBAAX,CAAkCH,IAAlC,CAAnB;AACA,UAAM;AAAEI,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAkCH,IAAI,CAACI,IAA7C;AACAvB,IAAAA,UAAU,CAACwB,cAAX,CAA0BH,YAA1B;AACArB,IAAAA,UAAU,CAACyB,eAAX,CAA2BH,aAA3B;AACAX,IAAAA,GAAG,CAACK,QAAJ,CAAa,GAAb;AACH,GAND,CAME,OAAOU,GAAP,EAAY;AACVf,IAAAA,GAAG,CAACK,QAAJ,CAAa,wBAAb;AACH;AACJ,CAXD;AAcApB,MAAM,CAACa,GAAP,CAAW,YAAX,EAAyB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACzC,MAAI;AACA,QAAIgB,MAAM,GAAG,MAAM3B,UAAU,CAAC4B,gBAAX,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACJ,IAAnB;AACAZ,IAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBlB,IAAhB,CAAqBc,MAAM,CAACJ,IAA5B;AACH,GAJD,CAIE,OAAOG,GAAP,EAAY;AACVf,IAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBlB,IAAhB,CAAqBa,GAArB;AACH;AAEJ,CATD;AAWA,MAAMM,IAAI,GAAG9B,OAAO,CAACC,GAAR,CAAY8B,IAAZ,IAAoB,IAAjC;AACArC,MAAM,CAACsC,MAAP,CAAcF,IAAd,EAAoB,MAAM;AACtBH,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBE,IAAK,EAAlC;AACH,CAFD","sourcesContent":["const express = require('express');\r\nconst server = express();\r\n\r\nconst SpotifyWebApi = require('spotify-web-api-node');\r\nscopes = ['user-read-private', 'user-read-email', 'playlist-modify-public', 'playlist-modify-private']\r\n\r\nrequire('dotenv').config();\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n    clientId: process.env.SPOTIFY_API_ID,\r\n    clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\r\n    redirectUri: process.env.CALLBACK_URL,\r\n});\r\n\r\n/* GET home page. */\r\nserver.get('/', function (req, res, next) {\r\n    res.send(`home page (will be the react app, I guess, so this route won't render anything.)`);\r\n});\r\n\r\nserver.get('/login', (req, res) => {\r\n    const html = spotifyApi.createAuthorizeURL(scopes)\r\n    res.redirect(html + \"&show_dialog=true\")\r\n})\r\n\r\nserver.get('/callback', async (req, res) => {\r\n    const { code } = req.query;\r\n    try {\r\n        const data = await spotifyApi.authorizationCodeGrant(code)\r\n        const { access_token, refresh_token } = data.body;\r\n        spotifyApi.setAccessToken(access_token);\r\n        spotifyApi.setRefreshToken(refresh_token);\r\n        res.redirect('/');\r\n    } catch (err) {\r\n        res.redirect('/#/error/invalid token');\r\n    }\r\n});\r\n\r\n\r\nserver.get('/playlists', async (req, res) => {\r\n    try {\r\n        var result = await spotifyApi.getUserPlaylists();\r\n        console.log(result.body);\r\n        res.status(200).send(result.body);\r\n    } catch (err) {\r\n        res.status(400).send(err)\r\n    }\r\n\r\n});\r\n\r\nconst port = process.env.PORT || 3001;\r\nserver.listen(port, () => {\r\n    console.log(`watching port ${port}`);\r\n})"]},"metadata":{},"sourceType":"module"}