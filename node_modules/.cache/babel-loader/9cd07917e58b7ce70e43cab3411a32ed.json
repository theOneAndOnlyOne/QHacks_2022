{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/esm/extends\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";import _inheritsLoose from\"@babel/runtime/helpers/esm/inheritsLoose\";import addOneClass from'dom-helpers/addClass';import removeOneClass from'dom-helpers/removeClass';import React from'react';import Transition from'./Transition';import{classNamesShape}from'./utils/PropTypes';var _addClass=function addClass(node,classes){return node&&classes&&classes.split(' ').forEach(function(c){return addOneClass(node,c);});};var removeClass=function removeClass(node,classes){return node&&classes&&classes.split(' ').forEach(function(c){return removeOneClass(node,c);});};/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */var CSSTransition=/*#__PURE__*/function(_React$Component){_inheritsLoose(CSSTransition,_React$Component);function CSSTransition(){var _this;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this;_this.appliedClasses={appear:{},enter:{},exit:{}};_this.onEnter=function(maybeNode,maybeAppearing){var _this$resolveArgument=_this.resolveArguments(maybeNode,maybeAppearing),node=_this$resolveArgument[0],appearing=_this$resolveArgument[1];_this.removeClasses(node,'exit');_this.addClass(node,appearing?'appear':'enter','base');if(_this.props.onEnter){_this.props.onEnter(maybeNode,maybeAppearing);}};_this.onEntering=function(maybeNode,maybeAppearing){var _this$resolveArgument2=_this.resolveArguments(maybeNode,maybeAppearing),node=_this$resolveArgument2[0],appearing=_this$resolveArgument2[1];var type=appearing?'appear':'enter';_this.addClass(node,type,'active');if(_this.props.onEntering){_this.props.onEntering(maybeNode,maybeAppearing);}};_this.onEntered=function(maybeNode,maybeAppearing){var _this$resolveArgument3=_this.resolveArguments(maybeNode,maybeAppearing),node=_this$resolveArgument3[0],appearing=_this$resolveArgument3[1];var type=appearing?'appear':'enter';_this.removeClasses(node,type);_this.addClass(node,type,'done');if(_this.props.onEntered){_this.props.onEntered(maybeNode,maybeAppearing);}};_this.onExit=function(maybeNode){var _this$resolveArgument4=_this.resolveArguments(maybeNode),node=_this$resolveArgument4[0];_this.removeClasses(node,'appear');_this.removeClasses(node,'enter');_this.addClass(node,'exit','base');if(_this.props.onExit){_this.props.onExit(maybeNode);}};_this.onExiting=function(maybeNode){var _this$resolveArgument5=_this.resolveArguments(maybeNode),node=_this$resolveArgument5[0];_this.addClass(node,'exit','active');if(_this.props.onExiting){_this.props.onExiting(maybeNode);}};_this.onExited=function(maybeNode){var _this$resolveArgument6=_this.resolveArguments(maybeNode),node=_this$resolveArgument6[0];_this.removeClasses(node,'exit');_this.addClass(node,'exit','done');if(_this.props.onExited){_this.props.onExited(maybeNode);}};_this.resolveArguments=function(maybeNode,maybeAppearing){return _this.props.nodeRef?[_this.props.nodeRef.current,maybeNode]// here `maybeNode` is actually `appearing`\n:[maybeNode,maybeAppearing];};_this.getClassNames=function(type){var classNames=_this.props.classNames;var isStringClassNames=typeof classNames==='string';var prefix=isStringClassNames&&classNames?classNames+\"-\":'';var baseClassName=isStringClassNames?\"\"+prefix+type:classNames[type];var activeClassName=isStringClassNames?baseClassName+\"-active\":classNames[type+\"Active\"];var doneClassName=isStringClassNames?baseClassName+\"-done\":classNames[type+\"Done\"];return{baseClassName:baseClassName,activeClassName:activeClassName,doneClassName:doneClassName};};return _this;}var _proto=CSSTransition.prototype;_proto.addClass=function addClass(node,type,phase){var className=this.getClassNames(type)[phase+\"ClassName\"];var _this$getClassNames=this.getClassNames('enter'),doneClassName=_this$getClassNames.doneClassName;if(type==='appear'&&phase==='done'&&doneClassName){className+=\" \"+doneClassName;}// This is to force a repaint,\n// which is necessary in order to transition styles when adding a class name.\nif(phase==='active'){/* eslint-disable no-unused-expressions */node&&node.scrollTop;}if(className){this.appliedClasses[type][phase]=className;_addClass(node,className);}};_proto.removeClasses=function removeClasses(node,type){var _this$appliedClasses$=this.appliedClasses[type],baseClassName=_this$appliedClasses$.base,activeClassName=_this$appliedClasses$.active,doneClassName=_this$appliedClasses$.done;this.appliedClasses[type]={};if(baseClassName){removeClass(node,baseClassName);}if(activeClassName){removeClass(node,activeClassName);}if(doneClassName){removeClass(node,doneClassName);}};_proto.render=function render(){var _this$props=this.props,_=_this$props.classNames,props=_objectWithoutPropertiesLoose(_this$props,[\"classNames\"]);return/*#__PURE__*/React.createElement(Transition,_extends({},props,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}));};return CSSTransition;}(React.Component);CSSTransition.defaultProps={classNames:''};export default CSSTransition;","map":{"version":3,"sources":["C:/Users/joshu/Test/src/node_modules/react-transition-group/esm/CSSTransition.js"],"names":["_extends","_objectWithoutPropertiesLoose","_inheritsLoose","addOneClass","removeOneClass","React","Transition","classNamesShape","_addClass","addClass","node","classes","split","forEach","c","removeClass","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","appliedClasses","appear","enter","exit","onEnter","maybeNode","maybeAppearing","_this$resolveArgument","resolveArguments","appearing","removeClasses","props","onEntering","_this$resolveArgument2","type","onEntered","_this$resolveArgument3","onExit","_this$resolveArgument4","onExiting","_this$resolveArgument5","onExited","_this$resolveArgument6","nodeRef","current","getClassNames","classNames","isStringClassNames","prefix","baseClassName","activeClassName","doneClassName","_proto","prototype","phase","className","_this$getClassNames","scrollTop","_this$appliedClasses$","base","active","done","render","_this$props","_","createElement","Component","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;"]},"metadata":{},"sourceType":"module"}